name: Linux AppImage Release

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write

concurrency:
  group: linux-release-${{ github.event.release.id || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-attach-linux:
    runs-on: ubuntu-22.04   # cambia a 20.04 si necesitas glibc m치s vieja
    env:
      QT_VERSION: 6.9.2
      QT_ARCH: gcc_64
      QT_DIR: ${{ github.workspace }}/Qt
      APPDIR: ${{ github.workspace }}/AppDir
    steps:
      - name: Checkout (release ref)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.draft && github.event.release.target_commitish || format('refs/tags/{0}', github.event.release.tag_name || github.ref_name) }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf file cmake ninja-build build-essential \
                                  libgl1-mesa-dev libxkbcommon-x11-0 libxcb-xinerama0 \
                                  libxcb-image0 libxcb-keysyms1 libxcb-render-util0 curl \
                                  libxcb-cursor0 libxcb-icccm4 libxcb-shape0 libxcb1 \
                                  libxcb-render0 libxcb-shm0 libxcb-xfixes0 libxcb-randr0 libxcb-sync1 libxcb-xkb1 \
                                  libx11-xcb1 libxrender1 libxi6 libxrandr2 \
                                  libsm6 libice6 \
                                  libfontconfig1 libfreetype6 libglib2.0-0

      - name: Install aqt + linuxdeploy tools
        shell: bash
        run: |
          set -euo pipefail

          python -m pip install --upgrade pip aqtinstall pyinstaller

          # Qt (sin archives ni qt_base)
          python -m aqt install-qt linux desktop 6.9.2 linux_gcc_64 -O "$GITHUB_WORKSPACE/Qt"

          echo "$GITHUB_WORKSPACE/Qt/6.9.2/gcc_64/bin" >> $GITHUB_PATH

          # linuxdeploy + plugin-qt
          mkdir -p "$GITHUB_WORKSPACE/tools"
          curl -Ls -o tools/linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          curl -Ls -o tools/linuxdeploy-plugin-qt https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x tools/linuxdeploy tools/linuxdeploy-plugin-qt
      # --- Build frontend (Qt) ---
      - name: Configure frontend (CMake)
        working-directory: src/frontend
        run: >
          cmake -G Ninja -S . -B build/Release
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH="$QT_DIR/6.9.2/gcc_64"

      - name: Build frontend (CMake)
        working-directory: src/frontend
        run: cmake --build build/Release --parallel
        
      # --- Build launcher (C++) opcional (si usas el launcher Qt en Linux) ---
      - name: Configure launcher (CMake)
        run: >
          cmake -G Ninja -S . -B build/Release
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_PREFIX_PATH="$QT_DIR/6.9.2/gcc_64"

      - name: Build launcher (CMake)
        run: cmake --build build/Release --parallel

      # --- Build backend (PyInstaller) ---
      - name: Install backend deps
        working-directory: src/runner
        run: |
          python -m pip install -r requirements.txt

      - name: Package backend with PyInstaller (Linux)
        working-directory: src/runner
        shell: bash
        env:
          EV3_HOST: ${{ secrets.EV3_HOST }}
          EV3_USER: ${{ secrets.EV3_USER }}
          EV3_PASS: ${{ secrets.EV3_PASS }}
        run: |
          set -euo pipefail

          # Crea .env junto a app.py
          cat > .env <<EOF
          EV3_HOST=${EV3_HOST}
          EV3_USER=${EV3_USER}
          EV3_PASS=${EV3_PASS}
          EOF

          pyinstaller app.py --name backend --onefile --noconsole --add-data ".env:.env"

          # Copia al staging (ajusta si tu layout es distinto)
          install -D -m 755 dist/backend "${APPDIR}/backend"

      # --- Montar AppDir ---
      - name: Assemble AppDir
        run: |
          set -euo pipefail
          APPDIR="${APPDIR}"
          mkdir -p "$APPDIR/usr/bin" \
                   "$APPDIR/usr/share/applications" \
                   "$APPDIR/usr/share/icons/hicolor/256x256/apps"

          # Copia binarios (asegurar +x)
          cp -a "src/frontend/build/Release/." "$APPDIR/usr/bin/"
          cp "src/frontend/build/Release/frontend" "$APPDIR/usr/bin/frontend"
          chmod +x "$APPDIR/usr/bin/frontend"

          cp "src/runner/dist/backend" "$APPDIR/usr/bin/backend"
          chmod +x "$APPDIR/usr/bin/backend"

          cp "dist/release/launcher" "$APPDIR/usr/bin/launcher"
          chmod +x "$APPDIR/usr/bin/launcher"

          cp "src/runner/.env" "$APPDIR/usr/bin/.env"
          # Si tienes launcher Qt en Linux, usa ese; si no, usa script
          if [[ -f "dist/release/launcher" ]]; then
            cp "dist/release/launcher" "$APPDIR/usr/bin/launcher"
            chmod +x "$APPDIR/usr/bin/launcher"
            LAUNCH_EXEC="launcher"
          else
            # Script launcher
            cat > "$APPDIR/usr/bin/launcher" << 'EOF'
            #!/usr/bin/env bash
            set -euo pipefail
            HERE="$(cd "$(dirname "$0")" && pwd)"
            if [[ -f "$HERE/.env" ]]; then set -a; source "$HERE/.env"; set +a; fi
            "$HERE/backend" & BACK_PID=$!
            TIMEOUT_MS="${START_TIMEOUT_MS:-20000}"
            HOST="${BACKEND_HOST:-127.0.0.1}"
            PORT="${BACKEND_PORT:-5000}"
            elapsed=0; step=200
            while ! bash -c "</dev/tcp/$HOST/$PORT" 2>/dev/null; do
              sleep $(awk "BEGIN {print $step/1000}")
              elapsed=$((elapsed+step))
              if [[ $elapsed -ge $TIMEOUT_MS ]]; then
                echo "Backend no respondi칩 en ${TIMEOUT_MS}ms" >&2
                kill $BACK_PID || true
                exit 1
              fi
            done
            "$HERE/frontend" "$@"
            kill $BACK_PID 2>/dev/null || true
            wait $BACK_PID 2>/dev/null || true
          EOF
            chmod +x "$APPDIR/usr/bin/launcher"
            LAUNCH_EXEC="launcher"
          fi

          cat > "$APPDIR/usr/share/applications/OpenMindBlocks.desktop" <<EOF
          [Desktop Entry]
          Type=Application
          Name=OpenMindBlocks
          Exec=${LAUNCH_EXEC}
          Icon=openmindblocks
          Terminal=false
          Categories=Education;Development;
          EOF

          # Icono (ajusta la ruta si es distinto)
          cp "src/frontend/assets/icon-256.png" "$APPDIR/usr/share/icons/hicolor/256x256/apps/openmindblocks.png"

      # --- Generar AppImage ---
      - name: Build AppImage
        env:
          # Ayuda al plugin-qt si usas QML; si no, puedes omitir
          QML_SOURCES_PATHS: ${{ github.workspace }}/src/frontend
        run: |
          set -euo pipefail
          # Asegura permisos de ejecuci칩n de los AppImages (linuxdeploy y plugin)
          chmod +x tools/linuxdeploy tools/linuxdeploy-plugin-qt
          # Ejecuta plugin primero y luego output appimage
          tools/linuxdeploy --appdir "$APPDIR" \
            -d "$APPDIR/usr/share/applications/OpenMindBlocks.desktop" \
            -i "$APPDIR/usr/share/icons/hicolor/256x256/apps/openmindblocks.png" \
            -e "$APPDIR/usr/bin/frontend" \
            --plugin qt \
            --output appimage

          # Renombra el AppImage con versi칩n/tag
          APPIMAGE="$(ls -1 *.AppImage | head -n1)"
          NEWNAME="OpenMindBlocks-${{ github.event.release.tag_name || github.ref_name }}-linux-x86_64.AppImage"
          mv "$APPIMAGE" "$NEWNAME"
          echo "APPIMAGE_PATH=$NEWNAME" >> $GITHUB_ENV

      - name: Checksum
        run: |
          sha256sum "$APPIMAGE_PATH" | tee "$APPIMAGE_PATH.sha256"

      # --- Adjuntar al release existente ---
      - name: Attach to existing Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}
          files: |
            ${{ env.APPIMAGE_PATH }}
            ${{ env.APPIMAGE_PATH }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
